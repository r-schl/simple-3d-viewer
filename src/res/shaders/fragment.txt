#version 400 core

in vec2 textureCoordinates0;
in vec3 normal0;
in float visibility;

out vec4 out_color;

struct BaseLight
{
    vec3 color;
    float intensity;
};

struct DirectionalLight
{
    BaseLight base;
    vec3 direction;
};

uniform vec3 baseColor;
uniform vec3 ambientLight;
uniform sampler2D textureSampler;
uniform mat4 textureMat;

uniform vec3 dye;
uniform vec3 fogColor;

uniform DirectionalLight directionalLight;

vec4 calcLight(BaseLight base, vec3 direction, vec3 normal){
    float diffuseFactor = dot(normal, direction);

    vec4 diffuseColor = vec4(0,0,0,0);

    if(diffuseFactor > 0){
        diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;
    }

    return diffuseColor;
}

vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal){
    return calcLight(directionalLight.base, -directionalLight.direction, normal);
}

void main(void){

    vec4 totalLight = vec4(ambientLight,1);

    vec2 coord = (textureMat * vec4(fract(textureCoordinates0), 1,1 )).xy;

    vec4 textureColor = texture(textureSampler, coord);

    if(textureColor.a < 0.5){
        discard;
    }

    textureColor *= vec4(dye,1);

    vec4 color = vec4(baseColor, 1);

    if(textureColor != vec4(0,0,0,0)){
        color = textureColor * color;
    }

    vec3 normal = normalize(normal0);

    totalLight += calcDirectionalLight(directionalLight, normal);

    out_color = color * totalLight;

    out_color = mix(vec4(fogColor,1.0), out_color, visibility);

}